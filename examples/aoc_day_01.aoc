// Solution for day 01 of advent of code 2024
// https://adventofcode.com/2023/day/1
//
// Run it as:
// aoc-lang examples/aoc_day_01.aoc < input

// Read input
data = []
for (line = input(); line; line = input()) {
    push(data, line)
}

// Part one
res = 0
for (i = 0; i < len(data); i = i + 1) {
    line = data[i]
    n = 0

    // First number
    for (j = 0; j < len(line); j = j + 1) {
        c = int(line[j]) - int('0')
        if (c >= 0 & c < 10) {
            n = c
            break
        }
    }

    // Last number
    for (j = len(line) - 1; j >= 0; j = j - 1) {
        c = int(line[j]) - int('0')
        if (c >= 0 & c < 10) {
            n = n * 10 + c
            break
        }
    }

    res = res + n
}

print("Part one: " + str(res))

// Part two
substr_is = fn(target, position, lookup) {
    if (position + len(lookup) > len(target)) {
        return false
    }

    for (i = 0; i < len(lookup); i = i + 1) {
        if (target[position + i] != lookup[i]) {
            return false
        }
    }

    return true
}

digits = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten"]
digit = fn(string, position) {
    d = int(string[position]) - int('0')
    if (d >= 0 & d < 10) {
        return d
    }

    for (d = 0; d < len(digits); d = d + 1) {
        if (substr_is(string, position, digits[d])) {
            return d + 1
        }
    }
}


res = 0
for (i = 0; i < len(data); i = i + 1) {
    line = data[i]
    n = 0

    // First number
    for (j = 0; j < len(line); j = j + 1) {
        d = digit(line, j)
        if (d) {
            n = d
            break
        }
    }

    // Last number
    for (j = len(line) - 1; j >= 0; j = j - 1) {
        d = digit(line, j)
        if (d) {
            n = n * 10 + d
            break
        }
    }

    res = res + n
}

print("Part two: " + str(res))
